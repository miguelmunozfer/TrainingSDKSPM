// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrainingSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CoreMIDI
import DeveloperToolsSupport
import Foundation
import HealthKit
import Instructions
import SafariServices
import Swift
import SwiftUI
import UIKit
import WeFitterLib
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class Stat : Swift.Codable {
  public var cal: Swift.Int?
  public var time: Swift.Int?
  public var distance: Swift.Double?
  public var steps: Swift.Int?
  public var date: Foundation.Date?
  public init()
  public func statFromJson(_ json: Foundation.NSDictionary) -> TrainingSDK.Stat
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum YTPlayerState : Swift.String {
  case unstarted
  case ended
  case playing
  case paused
  case buffering
  case queued
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum YTPlaybackQuality : Swift.String {
  case small
  case medium
  case large
  case hd720
  case hd1080
  case highRes
  case auto
  case defaults
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum YTPlayerError : Swift.String {
  case invalidParam
  case html5Error
  case videoNotFound
  case notEmbeddable
  case cannotFindVideo
  case sameAsNotEmbeddable
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum YTPlayerCallback : Swift.String {
  case onReady
  case onStateChange
  case onPlaybackQualityChange
  case onError
  case onPlayTime
  case onYouTubeIframeAPIReady
  case onYouTubeIframeAPIFailedToLoad
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum YTRegexPatterns : Swift.String {
  case embedUrl
  case adUrl
  case oAuth
  case staticProxy
  case syndication
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol YTPlayerViewDelegate {
  func playerViewDidBecomeReady(_ playerView: TrainingSDK.YTPlayerView)
  func playerView(_ playerView: TrainingSDK.YTPlayerView, didChangeTo state: TrainingSDK.YTPlayerState)
  func playerView(_ playerView: TrainingSDK.YTPlayerView, didChangeTo quality: TrainingSDK.YTPlaybackQuality)
  func playerView(_ playerView: TrainingSDK.YTPlayerView, receivedError error: TrainingSDK.YTPlayerError)
  func playerView(_ playerView: TrainingSDK.YTPlayerView, didPlayTime playTime: Swift.Float)
  func playerViewPreferredWebViewBackgroundColor(_ playerView: TrainingSDK.YTPlayerView) -> UIKit.UIColor
  func playerViewPreferredInitialLoadingView(_ playerView: TrainingSDK.YTPlayerView) -> UIKit.UIView?
}
extension TrainingSDK.YTPlayerViewDelegate {
  public func playerViewDidBecomeReady(_ playerView: TrainingSDK.YTPlayerView)
  public func playerView(_ playerView: TrainingSDK.YTPlayerView, didChangeTo state: TrainingSDK.YTPlayerState)
  public func playerView(_ playerView: TrainingSDK.YTPlayerView, didChangeTo quality: TrainingSDK.YTPlaybackQuality)
  public func playerView(_ playerView: TrainingSDK.YTPlayerView, receivedError error: TrainingSDK.YTPlayerError)
  public func playerView(_ playerView: TrainingSDK.YTPlayerView, didPlayTime playTime: Swift.Float)
  public func playerViewPreferredWebViewBackgroundColor(_ playerView: TrainingSDK.YTPlayerView) -> UIKit.UIColor
  public func playerViewPreferredInitialLoadingView(_ playerView: TrainingSDK.YTPlayerView) -> UIKit.UIView?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class YTPlayerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var delegate: (any TrainingSDK.YTPlayerViewDelegate)?
  @_Concurrency.MainActor(unsafe) public func load(videoId: Swift.String, playerVars: [Swift.String : Any]? = nil) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func load(playlistId: Swift.String, playerVars: [Swift.String : Any]? = nil) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func playVideo()
  @_Concurrency.MainActor(unsafe) public func pauseVideo()
  @_Concurrency.MainActor(unsafe) public func stopVideo()
  @_Concurrency.MainActor(unsafe) public func seek(seekToSeconds: Swift.Float, allowSeekAhead: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func cue(videoId: Swift.String, startSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func cue(videoId: Swift.String, startSeconds: Swift.Float, endSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(videoId: Swift.String, startSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(videoId: Swift.String, startSeconds: Swift.Float, endSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func cue(videoUrl: Swift.String, startSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func cue(videoUrl: Swift.String, startSeconds: Swift.Float, endSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(videoUrl: Swift.String, startSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(videoUrl: Swift.String, startSeconds: Swift.Float, endSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func cue(playlistId: Swift.String, index: Swift.Int, startSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func cue(videoIds: [Swift.String], index: Swift.Int, startSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(playlistId: Swift.String, index: Swift.Int, startSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(videoIds: [Swift.String], index: Swift.Int, startSeconds: Swift.Float, suggestedQuality: TrainingSDK.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func nextVideo()
  @_Concurrency.MainActor(unsafe) public func previousVideo()
  @_Concurrency.MainActor(unsafe) public func playVideo(at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public var playbackRate: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func availablePlaybackRates() -> [Swift.Float]?
  @_Concurrency.MainActor(unsafe) public func set(loop: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func set(shuffle: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func videoLoadedFraction() -> Swift.Float
  @_Concurrency.MainActor(unsafe) public var playerState: TrainingSDK.YTPlayerState {
    get
  }
  @_Concurrency.MainActor(unsafe) public var currentTime: Swift.Float {
    get
  }
  @_Concurrency.MainActor(unsafe) public var playbackQuality: TrainingSDK.YTPlaybackQuality {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func availableQualityLevels() -> [TrainingSDK.YTPlaybackQuality]?
  @_Concurrency.MainActor(unsafe) public var duration: Foundation.TimeInterval {
    get
  }
  @_Concurrency.MainActor(unsafe) public var videoUrl: Foundation.URL? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var videoEmbedCode: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public func playlist() -> [Swift.String]?
  @_Concurrency.MainActor(unsafe) public func playlistIndex() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TrainingSDK.YTPlayerView : UIKit.UIWebViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: UIKit.UIWebView, shouldStartLoadWith request: Foundation.URLRequest, navigationType: UIKit.UIWebView.NavigationType) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: UIKit.UIWebView, didFailLoadWithError error: any Swift.Error)
}
public struct WorkoutSummary : Swift.Codable {
  public var title: Swift.String?
  public var classTitle: Swift.String?
  public var image: Swift.String?
  public var alternativeClassAvailable: Swift.Bool?
  public var kcal: Swift.String?
  public var descripcion: Swift.String?
  public var duration: Swift.String?
  public var url: Swift.String?
  public var day: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StringOrInt : Swift.Codable {
  case string(Swift.String)
  case int(Swift.Int)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public struct TrainingEvent : Swift.Codable {
  public var eventName: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrainingDevice : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIFont {
  public static func jbs_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}
@_hasMissingDesignatedInitializers public class WorkoutSDK {
  public static let sharedInstance: TrainingSDK.WorkoutSDK
  public func start(with user: Swift.String, clientId: Swift.String, clientSecret: Swift.String)
  public func logout()
  public func setMainColor(color: Swift.String)
  public func setPrimaryButtonColor(_ color: Swift.String)
  public func setNavigationBarColor(color: Swift.String)
  public func setNavigationTintColor(color: Swift.String)
  public func isProfileFilled() -> Swift.Bool
  public func showVirtualPT()
  public func updateProfile(sex: TrainingSDK.TrainingGender?, height: Swift.Int?, weigth: Swift.Int?, birthDate: Foundation.Date?, level: Swift.Int? = nil, basalMetabolism: Swift.Int? = nil, operationDate: Foundation.Date? = nil, activityLevel: Swift.Int? = nil, generateProfile: Swift.Bool = false)
  public func updateProfile(name: Swift.String? = nil, lastName: Swift.String? = nil, sex: TrainingSDK.TrainingGender?, height: Swift.Int?, weigth: Swift.Int?, birthDate: Foundation.Date?)
  public func getProfile() -> TrainingSDK.PublicProfile?
  public func setPathologies(pathologies: [TrainingSDK.Pathologies])
  public func showWorkoutPlan()
  public func getWorkoutPlan(_ completion: @escaping ((UIKit.UIViewController) -> ()))
  public func showEcareController()
  public func getEcareController() -> UIKit.UIViewController
  public func getStatsViewController(_ completion: @escaping ((UIKit.UIViewController) -> ()))
  public func getTodayStats(_ completion: @escaping ((TrainingSDK.Stat?) -> ()))
  public func getTrainingProfile(_ completion: @escaping ((UIKit.UIViewController?) -> ()))
  public func getTodayWorkout(_ completion: @escaping ((TrainingSDK.WorkoutSummary?) -> ()))
  public func showTodaytraining()
  public func getStatsBetween(startDate: Foundation.Date, endDate: Foundation.Date, _ completion: @escaping (([TrainingSDK.Stat]?) -> ()))
  public func showWefitter(_ completion: @escaping ((UIKit.UIViewController) -> ()))
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class HCVimeoVideoExtractor : ObjectiveC.NSObject {
  public static func fetchVideoURLFrom(url: Foundation.URL, completion: @escaping (_ video: TrainingSDK.HCVimeoVideo?, _ error: (any Swift.Error)?) -> Swift.Void)
  public static func fetchVideoURLFrom(id: Swift.String, completion: @escaping (_ video: TrainingSDK.HCVimeoVideo?, _ error: (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public struct PublicProfile : Swift.Codable {
  public var name: Swift.String?
  public var lastName: Swift.String?
  public var height: Swift.Int?
  public var weight: Swift.Int?
  public var gender: TrainingSDK.TrainingGender?
  public var birthDate: Foundation.Date?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Pathologies : Swift.Int {
  case arterialHypertension, osteoporosis, diabetes, obesity, highCholesterolOrTriglycerides, backPain, metabolicsyndrome, copd, multipleSclerosis, fibromyalgia, stroke, heartDisease
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TrainingType : Swift.Codable {
  case diabetes, bariatrico
  public static func == (a: TrainingSDK.TrainingType, b: TrainingSDK.TrainingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum TrainingGender : Swift.String, Swift.Codable {
  case male, female
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HCVimeoThumbnailQuality : Swift.String {
  case quality640
  case quality960
  case quality1280
  case qualityBase
  case qualityUnknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HCVimeoVideoQuality : Swift.String {
  case quality360p
  case quality540p
  case quality640p
  case quality720p
  case quality960p
  case quality1080p
  case qualityUnknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class HCVimeoVideo : ObjectiveC.NSObject {
  public var title: Swift.String
  public var thumbnailURL: [TrainingSDK.HCVimeoThumbnailQuality : Foundation.URL]
  public var videoURL: [TrainingSDK.HCVimeoVideoQuality : Foundation.URL]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class VitaleViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TrainingEvents {
  public static let shared: TrainingSDK.TrainingEvents
  weak public var eventsDelegate: (any TrainingSDK.TrainingEventsDelegate)?
  @objc deinit
}
public protocol TrainingEventsDelegate : AnyObject {
  func sendEvent(_ event: TrainingSDK.TrainingEvent)
}
extension TrainingSDK.YTPlayerState : Swift.Equatable {}
extension TrainingSDK.YTPlayerState : Swift.Hashable {}
extension TrainingSDK.YTPlayerState : Swift.RawRepresentable {}
extension TrainingSDK.YTPlaybackQuality : Swift.Equatable {}
extension TrainingSDK.YTPlaybackQuality : Swift.Hashable {}
extension TrainingSDK.YTPlaybackQuality : Swift.RawRepresentable {}
extension TrainingSDK.YTPlayerError : Swift.Equatable {}
extension TrainingSDK.YTPlayerError : Swift.Hashable {}
extension TrainingSDK.YTPlayerError : Swift.RawRepresentable {}
extension TrainingSDK.YTPlayerCallback : Swift.Equatable {}
extension TrainingSDK.YTPlayerCallback : Swift.Hashable {}
extension TrainingSDK.YTPlayerCallback : Swift.RawRepresentable {}
extension TrainingSDK.YTRegexPatterns : Swift.Equatable {}
extension TrainingSDK.YTRegexPatterns : Swift.Hashable {}
extension TrainingSDK.YTRegexPatterns : Swift.RawRepresentable {}
extension TrainingSDK.Pathologies : Swift.Equatable {}
extension TrainingSDK.Pathologies : Swift.Hashable {}
extension TrainingSDK.Pathologies : Swift.RawRepresentable {}
extension TrainingSDK.TrainingType : Swift.Equatable {}
extension TrainingSDK.TrainingType : Swift.Hashable {}
extension TrainingSDK.TrainingGender : Swift.Equatable {}
extension TrainingSDK.TrainingGender : Swift.Hashable {}
extension TrainingSDK.TrainingGender : Swift.RawRepresentable {}
extension TrainingSDK.HCVimeoThumbnailQuality : Swift.Equatable {}
extension TrainingSDK.HCVimeoThumbnailQuality : Swift.Hashable {}
extension TrainingSDK.HCVimeoThumbnailQuality : Swift.RawRepresentable {}
extension TrainingSDK.HCVimeoVideoQuality : Swift.Equatable {}
extension TrainingSDK.HCVimeoVideoQuality : Swift.Hashable {}
extension TrainingSDK.HCVimeoVideoQuality : Swift.RawRepresentable {}
